<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= filename %> - Video Player</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <link href="/style.css" rel="stylesheet">
  <style>
    /* Player-specific styles */
    .player-container {
      min-height: 100vh;
      background: var(--bg-primary);
      display: flex;
      flex-direction: column;
    }

    .player-header {
      background: var(--bg-navbar);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid var(--border-color);
      padding: 1rem 0;
      position: sticky;
      top: 0;
      z-index: 1000;
    }

    .video-container {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem;
      background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    }

    .video-player {
      width: 100%;
      max-width: 1200px;
      background: var(--bg-card);
      border-radius: var(--radius-xl);
      overflow: hidden;
      box-shadow: var(--shadow-xl);
      border: 1px solid var(--border-color);
    }

    .video-wrapper {
      position: relative;
      width: 100%;
      background: #000;
      aspect-ratio: 16/9;
    }

    .video-element {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }

    .video-controls {
      padding: 1.5rem;
      background: var(--bg-card);
      border-top: 1px solid var(--border-color);
    }

    .video-info {
      margin-bottom: 1rem;
    }

    .video-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 0.5rem;
    }

    .video-meta {
      display: flex;
      gap: 1rem;
      color: var(--text-secondary);
      font-size: 0.875rem;
    }

    .control-buttons {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .control-btn {
      padding: 0.5rem 1rem;
      border-radius: var(--radius-lg);
      border: 1px solid var(--border-color);
      background: var(--bg-secondary);
      color: var(--text-primary);
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.875rem;
    }

    .control-btn:hover {
      background: var(--bg-tertiary);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .control-btn.primary {
      background: var(--primary-color);
      color: white;
      border-color: var(--primary-color);
    }

    .control-btn.primary:hover {
      background: var(--primary-hover);
    }

    .fullscreen-btn {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      border: none;
      border-radius: var(--radius-md);
      padding: 0.5rem;
      cursor: pointer;
      transition: var(--transition);
      z-index: 10;
    }

    .fullscreen-btn:hover {
      background: rgba(0, 0, 0, 0.9);
      transform: scale(1.1);
    }

    .video-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-top: 2rem;
    }

    .stat-card {
      background: var(--bg-secondary);
      border-radius: var(--radius-lg);
      padding: 1rem;
      text-align: center;
      border: 1px solid var(--border-color);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--primary-color);
      margin-bottom: 0.25rem;
    }

    .stat-label {
      font-size: 0.875rem;
      color: var(--text-secondary);
    }

    @media (max-width: 768px) {
      .video-container {
        padding: 1rem;
      }
      
      .control-buttons {
        justify-content: center;
      }
      
      .video-meta {
        flex-direction: column;
        gap: 0.5rem;
      }
    }

    /* Fullscreen styles */
    .video-wrapper.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 9999;
      background: #000;
    }

    .video-wrapper.fullscreen .video-element {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
  </style>
</head>
<body>
  <div class="player-container">
    <!-- Header -->
    <div class="player-header">
      <div class="container">
        <div class="d-flex justify-content-between align-items-center">
          <div class="d-flex align-items-center">
            <a href="/downloads" class="btn btn-outline-secondary me-3">
              <i class="fas fa-arrow-left me-1"></i>Back to Downloads
            </a>
            <h4 class="mb-0"><i class="fas fa-play me-2"></i>Video Player</h4>
          </div>
          <button class="theme-toggle" id="themeToggle">
            <i class="fas fa-moon" id="themeIcon"></i>
            <span id="themeText">Dark Mode</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Video Player -->
    <div class="video-container">
      <div class="video-player">
        <div class="video-wrapper" id="videoWrapper">
          <video 
            class="video-element" 
            id="videoPlayer" 
            controls 
            preload="metadata"
            poster="/api/thumbnail/<%= filename %>"
          >
            <source src="/downloads/<%= filename %>" type="video/mp4">
            Your browser does not support the video tag.
          </video>
          <button class="fullscreen-btn" id="fullscreenBtn" title="Toggle Fullscreen">
            <i class="fas fa-expand"></i>
          </button>
        </div>
        
        <div class="video-controls">
          <div class="video-info">
            <h5 class="video-title"><%= filename %></h5>
            <div class="video-meta">
              <span><i class="fas fa-file-video me-1"></i>MP4 Video</span>
              <span><i class="fas fa-clock me-1"></i><span id="videoDuration">Loading...</span></span>
              <span><i class="fas fa-hdd me-1"></i><span id="videoSize">Calculating...</span></span>
            </div>
          </div>
          
          <div class="control-buttons">
            <button class="control-btn primary" id="playPauseBtn">
              <i class="fas fa-play" id="playIcon"></i>
              <span id="playText">Play</span>
            </button>
            <button class="control-btn" id="restartBtn">
              <i class="fas fa-redo"></i>
              Restart
            </button>
            <button class="control-btn" id="downloadBtn">
              <i class="fas fa-download"></i>
              Download
            </button>
            <button class="control-btn" id="shareBtn">
              <i class="fas fa-share"></i>
              Share
            </button>
            <button class="control-btn" id="deleteBtn">
              <i class="fas fa-trash"></i>
              Delete
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Video Stats -->
    <div class="container mb-4">
      <div class="video-stats">
        <div class="stat-card">
          <div class="stat-value" id="resolution">-</div>
          <div class="stat-label">Resolution</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="bitrate">-</div>
          <div class="stat-label">Bitrate</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="fps">-</div>
          <div class="stat-label">Frame Rate</div>
        </div>
        <div class="stat-card">
          <div class="stat-value" id="codec">-</div>
          <div class="stat-label">Codec</div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Theme Toggle
    const html = document.documentElement;
    const themeToggle = document.getElementById('themeToggle');
    const themeIcon = document.getElementById('themeIcon');
    const themeText = document.getElementById('themeText');
    
    const currentTheme = localStorage.getItem('theme') || 'light';
    html.setAttribute('data-theme', currentTheme);
    updateThemeUI(currentTheme);
    
    themeToggle.addEventListener('click', () => {
      const currentTheme = html.getAttribute('data-theme');
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      
      html.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateThemeUI(newTheme);
    });
    
    function updateThemeUI(theme) {
      if (theme === 'dark') {
        themeIcon.className = 'fas fa-sun';
        themeText.textContent = 'Light Mode';
      } else {
        themeIcon.className = 'fas fa-moon';
        themeText.textContent = 'Dark Mode';
      }
    }

    // Video Player Controls
    const video = document.getElementById('videoPlayer');
    const playPauseBtn = document.getElementById('playPauseBtn');
    const playIcon = document.getElementById('playIcon');
    const playText = document.getElementById('playText');
    const restartBtn = document.getElementById('restartBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    const shareBtn = document.getElementById('shareBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    const fullscreenBtn = document.getElementById('fullscreenBtn');
    const videoWrapper = document.getElementById('videoWrapper');

    // Play/Pause
    playPauseBtn.addEventListener('click', () => {
      if (video.paused) {
        video.play();
      } else {
        video.pause();
      }
    });

    video.addEventListener('play', () => {
      playIcon.className = 'fas fa-pause';
      playText.textContent = 'Pause';
    });

    video.addEventListener('pause', () => {
      playIcon.className = 'fas fa-play';
      playText.textContent = 'Play';
    });

    // Restart
    restartBtn.addEventListener('click', () => {
      video.currentTime = 0;
      video.play();
    });

    // Download
    downloadBtn.addEventListener('click', () => {
      const link = document.createElement('a');
      link.href = video.src;
      link.download = '<%= filename %>';
      link.click();
    });

    // Share
    shareBtn.addEventListener('click', () => {
      if (navigator.share) {
        navigator.share({
          title: '<%= filename %>',
          text: 'Check out this video!',
          url: window.location.href
        });
      } else {
        // Fallback: copy URL to clipboard
        navigator.clipboard.writeText(window.location.href).then(() => {
          alert('Link copied to clipboard!');
        });
      }
    });

    // Delete
    deleteBtn.addEventListener('click', () => {
      if (confirm('Are you sure you want to delete this video?')) {
        fetch('/delete-file', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ filename: '<%= filename %>' })
        }).then(response => {
          if (response.ok) {
            window.location.href = '/downloads';
          } else {
            alert('Failed to delete video');
          }
        });
      }
    });

    // Fullscreen
    fullscreenBtn.addEventListener('click', () => {
      if (!document.fullscreenElement) {
        videoWrapper.requestFullscreen().catch(err => {
          console.log('Error attempting to enable fullscreen:', err);
        });
      } else {
        document.exitFullscreen();
      }
    });

    // Update fullscreen button icon
    document.addEventListener('fullscreenchange', () => {
      const icon = fullscreenBtn.querySelector('i');
      if (document.fullscreenElement) {
        icon.className = 'fas fa-compress';
        fullscreenBtn.title = 'Exit Fullscreen';
      } else {
        icon.className = 'fas fa-expand';
        fullscreenBtn.title = 'Toggle Fullscreen';
      }
    });

    // Video metadata
    video.addEventListener('loadedmetadata', () => {
      const duration = video.duration;
      const minutes = Math.floor(duration / 60);
      const seconds = Math.floor(duration % 60);
      document.getElementById('videoDuration').textContent = 
        `${minutes}:${seconds.toString().padStart(2, '0')}`;
    });

    // File size and metadata calculation
    async function getVideoInfo() {
      try {
        const response = await fetch(`/api/file-info?filename=<%= filename %>`);
        const data = await response.json();
        
        // Update file size
        if (data.size) {
          const sizeInMB = (data.size / (1024 * 1024)).toFixed(1);
          document.getElementById('videoSize').textContent = `${sizeInMB} MB`;
        }
        
        // Update video metadata
        if (data.resolution) {
          document.getElementById('resolution').textContent = data.resolution;
        }
        if (data.bitrate) {
          document.getElementById('bitrate').textContent = data.bitrate;
        }
        if (data.frameRate) {
          document.getElementById('fps').textContent = data.frameRate;
        }
        if (data.codec) {
          document.getElementById('codec').textContent = data.codec;
        }
      } catch (error) {
        console.error('Error getting video info:', error);
        document.getElementById('videoSize').textContent = 'Unknown';
        document.getElementById('resolution').textContent = '-';
        document.getElementById('bitrate').textContent = '-';
        document.getElementById('fps').textContent = '-';
        document.getElementById('codec').textContent = '-';
      }
    }

    getVideoInfo();

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      switch(e.code) {
        case 'Space':
          e.preventDefault();
          if (video.paused) video.play();
          else video.pause();
          break;
        case 'ArrowLeft':
          video.currentTime -= 10;
          break;
        case 'ArrowRight':
          video.currentTime += 10;
          break;
        case 'KeyF':
          fullscreenBtn.click();
          break;
      }
    });
  </script>
</body>
</html>
